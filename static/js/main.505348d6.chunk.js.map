{"version":3,"sources":["components/styles/color.js","components/TabStyles.js","components/styles/contants.js","components/BasicForm/BasicCalculation.js","components/InterestForm/InterestForm.js","components/AmortizationForm/style.js","components/AmortizationForm/AmortizationForm.js","components/App/style.js","components/App/App.js","serviceWorker.js","index.js"],"names":["colors","TabListStyle","styledTabTab","ActionButtonStyle","TabStyle","PanelStyle","styled","props","active","vertical","TabList","ActionButton","Tab","Panel","FormWrapper","div","Info","InfoPara","p","FormTitle","h2","CalculationForm","CalculatorFormInput","InputWrapper","FormInput","InputBox","input","ResultSide","ResultLabel","h3","BasicForm","useState","amount","interest","years","userValues","setUserValues","monthlyPayment","totalPayment","totalInterest","results","setResults","error","setError","CurrencyFormatter","Intl","NumberFormat","style","currency","handleInputChange","event","value","target","name","parseFloat","preventDefault","isValid","calculateResults","actualError","isNaN","Number","PrincipalAmount","monthlyRate","numberMonths","ratePower","Math","pow","monthly","isFinite","totalPaymentCalculated","totalInterestCalculated","format","type","placeholder","onChange","inputmode","pattern","min","step","className","disabled","InterestForm","rate_compare","totalCurrentInterest","totalCompareInterest","totalSaveInterest","monthlyAPR","compareAPR","rc","rc_monthly","rc_totalPayment","totalCompareInterestCalculated","totalSaveInterestCalculated","Amount","isResult","ResultTable","Result","table","AmortizationForm","amortizationSchedule","handleInputKeyPress","key","console","log","principal","durationMonths","monthly_payment_amount","i","prevPrincipal","principalBalance","interestPayment","principalPayment","max","accInterest","push","paymentNumber","payment","paymentRounded","interestPaymentRounded","principalPaymentRounded","principalBalanceRounded","accInterestRounded","onKeyPress","map","row","Section","section","SectionTitle","h1","App","customStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.505348d6.chunk.js","sourcesContent":["export const colors = {\n  darknavy: '#020c1b',\n  navy: '#0a192f',\n  lightnavy: '#112240',\n  lightestnavy: '#233554',\n  navyshadow: 'rgba(2, 12, 27, 0.7)',\n  slate: '#8892b0',\n  lightslate: '#a8b2d1',\n  lightestslate: '#ccd6f6',\n  white: '#e6f1ff',\n  green: '#64ffda',\n  greentint: 'rgba(100, 255, 218, 0.1)'\n}\n","import styled from 'styled-components';\nimport { styled as styledTabTab } from 'react-tabtab';\nimport {colors} from './styles/color'\n\nlet {TabListStyle, ActionButtonStyle, TabStyle, PanelStyle} = styledTabTab;\n\nTabListStyle = styled(TabListStyle)`\n  background-color: transparent;\n  border: 0;\n  width: 360px;\n  margin-left: -25px;\n`;\n\nTabStyle = styled(TabStyle)`\n  transition: color .28s ease;\n  color: ${colors.slate};\n  display: block;\n  z-index: 5;\n  border-left: 1px solid  ${colors.lightestnavy};\n  ${props => props.active && !props.vertical ?\n    `\n      border-left: 2px solid ${colors.green};\n      color:  ${colors.green};\n    `\n    : null}\n  &:hover {\n    background-color:  ${colors.greentint};\n    color:  ${colors.green};\n    border-left: 2px solid  ${colors.green};\n  }\n`;\n\nActionButtonStyle = styled(ActionButtonStyle)`\n  background-color: transparent;\n  border: transparent;\n  z-index: -3;\n  // border-right: 1px solid  ${colors.lightestnavy};\n`;\n\nPanelStyle = styled(PanelStyle)`\n  width: 70%;\n  right: 0;\n  margin-top: -175px;\n  margin-left: 350px;\n  transition: box-shadow .25s, -webkit-box-shadow .25s;\n  background-color: transparent;\n  // border: 1px solid  ${colors.lightestnavy};\n`;\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    TabList: TabListStyle,\n    ActionButton: ActionButtonStyle,\n    Tab: TabStyle,\n    Panel: PanelStyle\n}\n","import styled from 'styled-components'\nimport {colors} from \"./color\";\n\nexport const FormWrapper = styled.div`\n\tdisplay: block;\n\tcolor: ${colors.slate};\n\tpadding-bottom: 75px;\n`\nexport const Info = styled.div`\n\tdisplay: block;\n`\nexport const InfoPara = styled.p`\n\tmargin-left: 25px;\n\tcolor: ${colors.slate};\n\t\n\t::before {\n\t  content: \"▹\";\n\t  position: absolute;\n\t  margin-left: -25px;\n\t  color: ${colors.green};\n\t}\n`\n\nexport const FormTitle = styled.h2`\n\tcolor: ${colors.white};\n`\n\nexport const CalculationForm = styled.div`\n\tdisplay: block;\n\tmargin-top: 50px;\n`\nexport const CalculatorFormInput = styled.div`\n\tdisplay: block;\n\twidth: 100%;\n\tmargin-bottom: 45px;\n`\nexport const InputWrapper = styled.div`\n\tdisplay: flex;\n\twidth: 100%;\n`\nexport const FormInput = styled.div`\n\tdisplay: block;\n\t\n\tlabel {\n\t  font-size: .95em;\n\t  margin-bottom: 5px;\n\t  display: block;\n\t  color: ${colors.lightestslate}\n\t}\n\t\n\tsmall {\n\t  font-size: .75em;\n\t  color: lighten( $grey, 10% );\n\t}\n`\nexport const InputBox = styled.input`\n\t  box-sizing: border-box;\n\t  width: 90%;\n\t  padding: 5px 10px;\n\t  font-size: 100%;\n\t  color: ${colors.slate};\n\t  border: 2px solid ${colors.greentint};\n  \t  border-radius: 4px;\n  \t  background: transparent;\n`\n\nexport const ResultSide = styled.div`\n\tdisplay: block;\n`\n\nexport const ResultLabel = styled.h3`\n\tcolor: ${colors.green}\n\tfont-size: 18px;\n`\n","import React, {useState} from 'react';\nimport {\n    FormWrapper,\n    Info, FormTitle, InfoPara,\n    CalculationForm,\n    CalculatorFormInput,\n    InputWrapper, FormInput, InputBox,\n    ResultSide,\n\n    ResultLabel\n} from \"../styles/contants\"\n\nfunction BasicForm() {\n    // state to storage the values given by the user when filling the input fields\n    const [userValues, setUserValues] = useState({\n        amount: '',\n        interest: '',\n        years: ''\n    })\n    // state to storage the results of the calculation\n    const [results, setResults] = useState({\n        monthlyPayment: '',\n        totalPayment: '',\n        totalInterest: ''\n    });\n\n    // state to storage error message\n    const [error, setError] = useState('');\n\n    const CurrencyFormatter = new Intl.NumberFormat('us-US', {\n        style: 'currency',\n        currency: 'USD',\n    });\n    // event handler to update state when the user enters values\n    function handleInputChange(event) {\n        const value = event.target.value;\n        setUserValues({\n            ...userValues,\n            [event.target.name]: parseFloat(value)\n        })\n        event.preventDefault();\n        if (isValid()) {\n            setError('')\n            calculateResults(userValues);\n        }\n    }\n\n    // Manage validations and error messages\n    const isValid = () => {\n        const {amount, interest, years} = userValues;\n        let actualError ='';\n\n        // if (!amount || !interest || !years) {\n        //     actualError = 'All the values are required';\n        // }\n\n        if (isNaN(amount) || isNaN(interest) || isNaN(years) ){\n            actualError = 'All the values must be a valid number';\n        }\n\n        if (Number(amount) < 0 || Number(interest) < 0 || Number(years) < 0) {\n            actualError = 'All the values must be a positive number';\n        }\n        if (actualError) {\n            setError(actualError);\n            return false;\n        }\n        return true;\n    };\n\n\n    // Calculation\n    const calculateResults = ({amount, interest, years}) => {\n        const PrincipalAmount = amount;\n        const monthlyRate = interest / (100 * 12);\n        const numberMonths = years * 12;\n        const ratePower = Math.pow((1 + monthlyRate), numberMonths);\n\n        const monthly = PrincipalAmount * ((monthlyRate * ratePower) / (ratePower - 1));\n        if (isFinite(monthly)) {\n            const totalPaymentCalculated = (monthly * numberMonths);\n            const totalInterestCalculated = (totalPaymentCalculated - PrincipalAmount);\n            // Set up results to the state to be displayed to the user\n            setResults({\n                monthlyPayment: CurrencyFormatter.format(monthly),\n                totalPayment: CurrencyFormatter.format(totalPaymentCalculated),\n                totalInterest: CurrencyFormatter.format(totalInterestCalculated),\n            });\n        }\n    }\n\n    return (\n    <FormWrapper>\n        <Info>\n            <FormTitle>Basic Loan Calculation</FormTitle>\n            <InfoPara>Grabs three values from the form, and returns general information about a loan.</InfoPara>\n        </Info>\n\n\n        {/*<CalculationForm onSubmit={handleSubmitValues}>*/}\n        <CalculationForm>\n            <CalculatorFormInput>\n                <InputWrapper>\n                    <FormInput>\n                        <label>Amount</label>\n                           <InputBox\n                               type='number'\n                               name='amount'\n                               placeholder='7500'\n                               value={userValues.amount}\n                               onChange={handleInputChange}\n                               // onKeyPress={handleInputKeyPress}\n                           />\n                    </FormInput>\n                    <FormInput>\n                        <label>Interest Rate</label>\n                        <InputBox\n                            type='number'\n                            name='interest'\n                            placeholder='3'\n                            inputmode='numeric'\n                            pattern=\"[0-9]{.1}\"\n                            value={userValues.interest}\n                            onChange={handleInputChange}\n                            // onKeyPress={handleInputKeyPress}\n                        />\n                    </FormInput>\n                    <FormInput>\n                        <label>Term<small> (in decimal format)</small></label>\n                        <InputBox\n                            type='number'\n                            name='years'\n                            placeholder='years'\n                            min='0.0'\n                            step='0.1'\n                            inputmode='numeric'\n                            value={userValues.years}\n                            onChange={handleInputChange}\n                            // onKeyPress={handleInputKeyPress}\n                        />\n                    </FormInput>\n                </InputWrapper>\n                <p className='error'>{error}</p>\n            </CalculatorFormInput>\n\n            <ResultSide>\n                <ResultLabel>Results:</ResultLabel>\n                <InputWrapper>\n                    <FormInput>\n                        <label>Months Payment</label>\n                        <InputBox\n                            type='text'\n                            value={results.monthlyPayment}\n                            disabled\n                        />\n                    </FormInput>\n                    <FormInput>\n                        <label>Total Interest</label>\n                        <InputBox\n                            type='text'\n                            value={results.totalInterest}\n                            disabled\n                        />\n                    </FormInput>\n                    <FormInput>\n                        <label>Total Amount + Interest</label>\n                        <InputBox\n                            type='text'\n                            value={results.totalPayment}\n                            disabled\n                        />\n                    </FormInput>\n                </InputWrapper>\n            </ResultSide>\n        </CalculationForm>\n\n    </FormWrapper>\n    );\n}\n\nexport default BasicForm;\n","import React, {useState} from 'react';\nimport {\n  FormWrapper,\n  CalculationForm,\n  CalculatorFormInput,\n  FormTitle,\n  Info, InfoPara,\n  ResultSide,\n  FormInput, InputWrapper, InputBox, ResultLabel\n} from \"../styles/contants\"\n\nexport default function InterestForm() {\n  // state to storage the values given by the user when filling the input fields\n  const [userValues, setUserValues] = useState({\n\tamount: '',\n\tinterest: '',\n\tyears: '',\n\trate_compare: ''\n  })\n  // state to storage the results of the calculation\n  const [results, setResults] = useState({\n\ttotalCurrentInterest: '',\n\ttotalCompareInterest: '',\n\ttotalSaveInterest: '',\n  });\n\n  // state to storage error message\n  const [error, setError] = useState('');\n\n  // event handler to update state when the user enters values\n  const handleInputChange = (event) =>{\n\tconst value = event.target.value;\n\tsetUserValues({\n\t  ...userValues,\n\t  [event.target.name]: value\n\t});\n\tevent.preventDefault();\n\tif (isValid()) {\n\t  setError('');\n\t  calculateResults(userValues);\n\t}\n  }\n\n  // Manage validations and error messages\n  const isValid = () => {\n\tconst {amount, interest, years, rate_compare} = userValues;\n\tlet actualError = '';\n\n\t// if (!amount || !interest || !months) {\n\t//     actualError = 'All the values are required';\n\t// }\n\n\tif (isNaN(amount) || isNaN(interest) || isNaN(years) || isNaN(rate_compare)) {\n\t  actualError = 'All the values must be a valid number';\n\t}\n\n\tif (Number(amount) < 0 || Number(interest) < 0 || Number(years) < 0 || Number(rate_compare) < 0) {\n\t  actualError = 'All the values must be a positive number';\n\t}\n\n\tif  (Number(interest) === 0) {\n\t  actualError = 'There is no interest payment in this Loan';\n\t}\n\tif (actualError) {\n\t  setError(actualError);\n\t  return false;\n\t}\n\treturn true;\n  };\n\n  const CurrencyFormatter = new Intl.NumberFormat('us-US', {\n\tstyle: 'currency',\n\tcurrency: 'USD',\n  });\n\n  // Calculation\n  const calculateResults = ({amount, interest, years, rate_compare}) => {\n\n\tif ((Number(interest) > 0.0) && (Number(rate_compare) > 0)) {\n\t  //Current rate\n\t  const PrincipalAmount = Number(amount);\n\t  const monthlyAPR = Number(interest) / 1200;\n\t  const numberMonths = Number(years) * 12;\n\t  const ratePower = Math.pow((1 + monthlyAPR), numberMonths);\n\n\t  const monthly = PrincipalAmount * ((monthlyAPR * ratePower) / (ratePower - 1));\n\t  const totalPaymentCalculated = (monthly * numberMonths);\n\n\t  //Compare rate\n\t  const compareAPR = Number(rate_compare) / 1200;\n\t  const rc = Math.pow((1 + compareAPR), numberMonths);\n\t  const rc_monthly = PrincipalAmount * ((compareAPR * rc) / (rc - 1));\n\t  const rc_totalPayment = (rc_monthly * numberMonths);\n\n\t  if ((isFinite(monthly)) && (isFinite(rc_monthly))) {\n\t\tconst totalInterestCalculated = (totalPaymentCalculated - PrincipalAmount);\n\t\tconst totalCompareInterestCalculated = (rc_totalPayment - PrincipalAmount);\n\t\tconst totalSaveInterestCalculated = (totalInterestCalculated - totalCompareInterestCalculated);\n\n\t\t// Set up results to the state to be displayed to the user\n\t\tsetResults({\n\t\t  totalCurrentInterest: CurrencyFormatter.format(totalInterestCalculated),\n\t\t  totalCompareInterest: CurrencyFormatter.format(totalCompareInterestCalculated),\n\t\t  totalSaveInterest: CurrencyFormatter.format(totalSaveInterestCalculated),\n\t\t});\n\t  }\n\t} else if ((Number(interest) > 0.0) && (Number(rate_compare) === 0)){\n\t  //Current rate\n\t  const Amount = Number(amount);\n\t  const monthlyAPR = Number(interest) / 1200;\n\t  const numberMonths = Number(years);\n\t  const ratePower = Math.pow((1 + monthlyAPR), numberMonths);\n\n\t  const monthly = Amount * ((monthlyAPR * ratePower) / (ratePower - 1));\n\t  const totalPaymentCalculated = (monthly * numberMonths);\n\n\t  if ((isFinite(monthly))) {\n\t\tconst totalInterestCalculated = (totalPaymentCalculated - Amount);\n\n\t\tsetResults({\n\t\t  totalCurrentInterest: CurrencyFormatter.format( totalInterestCalculated),\n\t\t  totalCompareInterest: CurrencyFormatter.format(totalInterestCalculated),\n\t\t  totalSaveInterest: '0.0',\n\t\t  isResult: true,\n\t\t});\n\t  }\n\t}\n  };\n\n  return (\n\t  <FormWrapper>\n\t\t<Info>\n\t\t  <FormTitle>Interest Savings Calculation</FormTitle>\n\t\t  <InfoPara>Grabs four values from the form, and returns general information about a loan.</InfoPara>\n\t\t</Info>\n\n\t\t<CalculationForm>\n\t\t  <CalculatorFormInput>\n\t\t\t<InputWrapper>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Loan Amount</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='number'\n\t\t\t\t\tname='amount'\n\t\t\t\t\tplaceholder='7500'\n\t\t\t\t\tvalue={userValues.amount}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\n\t\t\t  <FormInput>\n\t\t\t\t<label>Interest Rate</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='number'\n\t\t\t\t\tname='interest'\n\t\t\t\t\tstep=\"0.1\" min=\"0.0\"\n\t\t\t\t\tplaceholder='3.0'\n\t\t\t\t\tvalue={userValues.interest}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\n\t\t\t  <FormInput>\n\t\t\t\t<label>Term<small> (in decimal format)</small></label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='number'\n\t\t\t\t\tname='years'\n\t\t\t\t\tplaceholder='years'\n\t\t\t\t\tmin='0.0'\n\t\t\t\t\tstep='0.1'\n\t\t\t\t\tvalue={userValues.years}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\n\t\t\t  <FormInput>\n\t\t\t\t<label>Comparison Rate</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='rate_compare'\n\t\t\t\t\tplaceholder='1.0'\n\t\t\t\t\tmin='0'\n\t\t\t\t\tvalue={userValues.rate_compare}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t\t<small> decimal input format</small>\n\t\t\t  </FormInput>\n\n\t\t\t</InputWrapper>\n\t\t\t<p className='error'>{error}</p>\n\t\t  </CalculatorFormInput>\n\n\t\t  <ResultSide>\n\t\t\t<ResultLabel>Results:</ResultLabel>\n\t\t\t<InputWrapper>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Current Interest Total</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={results.totalCurrentInterest}\n\t\t\t\t\tdisabled\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Rate Compare Total</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={results.totalCompareInterest}\n\t\t\t\t\tdisabled\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Interest Save Total</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={results.totalSaveInterest}\n\t\t\t\t\tdisabled\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\t\t\t</InputWrapper>\n\t\t  </ResultSide>\n\t\t</CalculationForm>\n\t  </FormWrapper>\n  )\n}\n","import styled from 'styled-components'\nimport {colors} from \"../styles/color\";\n\nexport const ResultTable = styled.div`\n\n`\nexport const Result = styled.table`\n\tmin-width: 100%;\n\tbackground: ${colors.greentint};\n\tborder: solid 1px ${colors.green};\n\tpadding: 20px/2 20px;\n    margin-top: 5px;\n    overflow: auto;\n    color: ${colors.lightestslate};\n    \n\tth {\n\t  text-align: center;\n\t  white-space: nowrap;\n\t  padding: 2px 10px;\n\t  border-right: solid 1px ${colors.lightnavy};\n\t  border-bottom: solid 1px ${colors.lightestslate};\n\t}\n\n\ttd {\n\t  padding: 2px;\n\t  text-align: center;\n\t  border-right: solid 1px ${colors.lightnavy};\n\t}\n`\n","import React, {useState} from 'react';\nimport {Result, ResultTable} from \"./style\";\nimport {\n  FormWrapper,\n  CalculationForm,\n  CalculatorFormInput,\n  FormTitle,\n  Info,\n  InfoPara,\n  ResultSide,\n  FormInput,\n  InputWrapper, InputBox\n} from \"../styles/contants\"\n\nfunction AmortizationForm() {\n  const [userValues, setUserValues] = useState({\n\tamount: '',\n\tinterest: '',\n\tyears: '',\n  })\n\n  const [results, setResults] = useState({\n\tamortizationSchedule: []\n  });\n\n  const CurrencyFormatter = new Intl.NumberFormat('us-US', {\n\tstyle: 'currency',\n\tcurrency: 'USD',\n  });\n\n  const [error, setError] = useState('');\n\n  function handleInputChange(event) {\n\tconst value = event.target.value;\n\tsetUserValues({\n\t  ...userValues,\n\t  [event.target.name]: Number(value)\n\t})\n\tevent.preventDefault();\n\tif (isValid()) {\n\t  setError('');\n\t  calculateResults(userValues);\n\t}\n  }\n\n  const handleInputKeyPress = event => {\n\tif (event.key === 'Enter') {\n\t  console.log('Enter key pressed' + event.target.value);\n\t}\n  }\n\n  const isValid = () => {\n\tconst {amount, interest, years} = userValues;\n\tlet actualError = '';\n\n\tif (isNaN(amount) || isNaN(interest) || isNaN(years)) {\n\t  actualError = 'All the values must be a valid number';\n\t}\n\n\tif (amount < 0 || interest < 0 || years < 0) {\n\t  actualError = 'All the values must be a positive number';\n\t}\n\tif (actualError) {\n\t  setError(actualError);\n\t  return false;\n\t}\n\treturn true;\n  };\n\n  // Calculation\n  const calculateResults = ({amount, interest, years}) => {\n\t  const principal = amount;\n\t  const monthlyAPR = interest/(100*12);\n\t  const durationMonths = years * 12;\n\n\t  // const monthly_payment_amount = (principal * (monthlyAPR +\n\t\t//   monthlyAPR / (Math.pow(monthlyAPR + 1, durationMonths) - 1)));\n\tconst ratePower = Math.pow((1 + monthlyAPR), durationMonths);\n\n\tconst monthly_payment_amount = principal * ((monthlyAPR * ratePower) / (ratePower - 1));\n\t// const monthly_payment_amount = principal * (monthlyAPR + monthlyAPR / (Math.pow(monthlyAPR + 1, durationMonths) - 1));\n\n\t  const amortizationSchedule = [];\n\t  for (let i = 0; i < durationMonths; i++) {\n\t\tconst prevPrincipal =\n\t\t\ti === 0 ? principal : amortizationSchedule[i - 1].principalBalance;\n\t\tconst interestPayment = prevPrincipal * monthlyAPR;\n\t\tconst principalPayment = monthly_payment_amount - interestPayment;\n\t\tconst principalBalance = Math.max(prevPrincipal - principalPayment, 0);\n\t\tconst accInterest =\n\t\t\t(i === 0 ? 0 : amortizationSchedule[i - 1].accInterest) +\n\t\t\tinterestPayment;\n\n\t\tamortizationSchedule.push({\n\t\t  paymentNumber: i + 1,\n\t\t  payment: monthly_payment_amount,\n\t\t  principalBalance: principalBalance,\n\t\t  interestPayment: interestPayment,\n\t\t  principalPayment: principalPayment,\n\t\t  accInterest: accInterest,\n\n\t\t  paymentRounded: CurrencyFormatter.format(monthly_payment_amount),\n\t\t  interestPaymentRounded: CurrencyFormatter.format(interestPayment),\n\t\t  principalPaymentRounded: CurrencyFormatter.format(principalPayment),\n\t\t  principalBalanceRounded: CurrencyFormatter.format(principalBalance),\n\t\t  accInterestRounded: CurrencyFormatter.format(accInterest),\n\t\t});\n\t  }\n\t  setResults({\n\t\tamortizationSchedule: amortizationSchedule,\n\t  });\n  }\n\n  return (\n\t  <FormWrapper>\n\t\t<Info>\n\t\t  <FormTitle>Interest Savings Calculation</FormTitle>\n\t\t  <InfoPara>Grabs three values from the form, and displays a complete amortization schedule for the provided\n\t\t\tloan information.</InfoPara>\n\t\t</Info>\n\n\t\t<CalculationForm>\n\t\t  <CalculatorFormInput>\n\t\t\t<InputWrapper>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Loan Amount</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='number'\n\t\t\t\t\tname='amount'\n\t\t\t\t\tplaceholder='7500'\n\t\t\t\t\tvalue={userValues.amount}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\tonKeyPress={handleInputKeyPress}\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Interest Rate</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='number'\n\t\t\t\t\tname='interest'\n\t\t\t\t\tplaceholder='3'\n\t\t\t\t\tvalue={userValues.interest}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\tonKeyPress={handleInputKeyPress}\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Term<small> (in decimal format)</small></label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='number'\n\t\t\t\t\tname='years'\n\t\t\t\t\tplaceholder='years'\n\t\t\t\t\tmin='1.0'\n\t\t\t\t\tvalue={userValues.years}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\tonKeyPress={handleInputKeyPress}\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\t\t\t</InputWrapper>\n\t\t\t<p className='error'>{error}</p>\n\t\t  </CalculatorFormInput>\n\n\t\t  <ResultSide>\n\t\t\t<p><label>Results:</label></p>\n\t\t\t<ResultTable>\n\t\t\t  <Result>\n\t\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t  <th>#</th>\n\t\t\t\t  <th>Payment</th>\n\t\t\t\t  <th>Principal</th>\n\t\t\t\t  <th>Interest</th>\n\t\t\t\t  <th>Balance</th>\n\t\t\t\t  {/*<th>Accumulated Interest</th>*/}\n\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t{results.amortizationSchedule.map(row => (\n\t\t\t\t\t<tr key={row.paymentNumber}>\n\t\t\t\t\t  <td>{row.paymentNumber}</td>\n\t\t\t\t\t  <td>{row.paymentRounded}</td>\n\t\t\t\t\t  <td>{row.principalPaymentRounded}</td>\n\t\t\t\t\t  <td>{row.interestPaymentRounded}</td>\n\t\t\t\t\t  <td>{row.principalBalanceRounded}</td>\n\t\t\t\t\t  {/*<td>{row.accInterestRounded}</td>*/}\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t  </Result>\n\t\t\t</ResultTable>\n\t\t  </ResultSide>\n\t\t  <div className=\"clear\"/>\n\t\t</CalculationForm>\n\t  </FormWrapper>\n  )\n}\nexport default AmortizationForm;\n","import styled from \"styled-components\";\nimport {colors} from \"../styles/color\";\n\nexport const Section = styled.section`\n\twidth: 100%;\n\theight: auto;\n\tpadding: 0 15% 15px 15%;\n\tcounter-increment: section 1;\n\tcolor: ${colors.slate};\n`\n\nexport const SectionTitle = styled.h1`\n\twidth: 100%;\n\tdisplay: flex;\n    -webkit-box-align: center;\n    align-items: center;\n    position: relative;\n    margin: 40px 15px 50px;\n    font-size: clamp(26px,5vw,32px);\n    white-space: nowrap;\n\tcolor: ${colors.lightestslate};\n\t\n\t::before{\n\t  position: relative;\n\t  bottom: 4px;\n\t  content: \"\" counter(section) \".\";\n\t  margin-right: 10px;\n\t  color: ${colors.green};\n\t  font-size: clamp(16px,3vw,20px);\n\t  font-weight: 400;\n    }\n\t::after{\n\t  content: \"\";\n\t  display: block;\n\t  position: relative;\n\t  top: 2px;\n\t  width: 850px;\n\t  height: 1px;\n\t  margin-left: 20px;\n\t  background-color: ${colors.lightestnavy};\n    }\n`\n","import \"../../style.scss\";\nimport React from 'react';\nimport {Tabs, TabList, Tab, PanelList, Panel} from \"react-tabtab\";\nimport customStyle from '../TabStyles';\nimport BasicForm from \"../BasicForm/BasicCalculation\";\nimport InterestForm from \"../InterestForm/InterestForm\";\nimport AmortizationForm from \"../AmortizationForm/AmortizationForm\";\nimport {Section, SectionTitle} from \"./style\";\nimport { Info, InfoPara} from \"../styles/contants\";\n\nexport default function App(){\n  return (\n      <div className=\"App\">\n        <Section>\n          <SectionTitle>Background</SectionTitle>\n          <Info>\n            <p>This is a ReactJS App for providing loan and interest calculations on web pages. It's small, fast, flexible, and forgiving.</p>\n            <InfoPara>Small: The minified version of the plugin is under 5kb.</InfoPara>\n            <InfoPara>Fast: It loads and executes quickly, and instantly provides results as your user types.</InfoPara>\n            <InfoPara>Flexible: Don't want it to calculate on keyup? There's a setting for that. Want to execute your own code every time the the tool calculates? Just provide a callback function. With every setting in the plugin accessible, you can completely customize the experience.</InfoPara>\n            <InfoPara>Forgiving: If you don't provide it with fields that are required to perform calculations, it will add them to the bottom of the form. If you don't provide it with a form or results div to begin with, you guessed it - it creates them. It will operate when trained on a completely empty div or use any fields you provide yourself.</InfoPara>\n          </Info>\n        </Section>\n        <Section>\n            <SectionTitle>Calculation Demos</SectionTitle>\n              <Tabs customStyle={customStyle} >\n                  <TabList>\n                    <Tab>Basic Loan Calculation</Tab>\n                    <Tab>Interest Savings Calculation</Tab>\n                    <Tab>Amortization Schedule Calculation</Tab>\n                  </TabList>\n\n                  <PanelList>\n                    <Panel>\n                      <BasicForm />\n                    </Panel>\n                    <Panel>\n                     <InterestForm/>\n                    </Panel>\n                    <Panel>\n                      <AmortizationForm />\n                    </Panel>\n                  </PanelList>\n              </Tabs>\n          </Section>\n      </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}