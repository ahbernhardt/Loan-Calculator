{"version":3,"sources":["components/styles/color.js","components/TabStyles.js","components/styles/contants.js","components/BasicForm/BasicCalculation.js","components/InterestForm/InterestForm.js","components/AmortizationForm/style.js","components/AmortizationForm/AmortizationForm.js","components/App/style.js","components/App/App.js","serviceWorker.js","index.js"],"names":["colors","TabListStyle","styledTabTab","ActionButtonStyle","TabStyle","PanelStyle","styled","props","active","vertical","TabList","ActionButton","Tab","Panel","FormWrapper","div","Info","InfoPara","p","FormTitle","h2","CalculationForm","CalculatorFormInput","InputWrapper","FormInput","InputBox","input","ResultSide","ResultLabel","h3","BasicForm","useState","amount","interest","months","userValues","setUserValues","monthlyPayment","totalPayment","totalInterest","results","setResults","error","setError","handleInputChange","event","value","target","name","preventDefault","isValid","calculateResults","actualError","isNaN","Number","PrincipalAmount","monthlyAPR","numberMonths","monthly","Math","pow","isFinite","monthlyPaymentCalculated","toFixed","totalPaymentCalculated","totalInterestCalculated","isResult","type","placeholder","onChange","step","min","className","disabled","InterestForm","rate_compare","totalCurrentInterest","totalCompareInterest","totalSaveInterest","compareAPR","rc_monthly","rc_totalPayment","totalCompareInterestCalculated","totalSaveInterestCalculated","Amount","ResultTable","Result","table","AmortizationForm","paymentNumber","paymentAmount","balance","LoanAmount","num_payments","payment_amount","payment_amount_formatted","totalPayment_Formatted","interest_per_payment","interest_per_payment_Formatted","amount_from_balance","counter_balance","parseInt","Section","section","SectionTitle","h1","App","customStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f5ca61be.chunk.js","sourcesContent":["export const colors = {\n  darknavy: '#020c1b',\n  navy: '#0a192f',\n  lightnavy: '#112240',\n  lightestnavy: '#233554',\n  navyshadow: 'rgba(2, 12, 27, 0.7)',\n  slate: '#8892b0',\n  lightslate: '#a8b2d1',\n  lightestslate: '#ccd6f6',\n  white: '#e6f1ff',\n  green: '#64ffda',\n  greentint: 'rgba(100, 255, 218, 0.1)'\n}\n","import styled from 'styled-components';\nimport { styled as styledTabTab } from 'react-tabtab';\nimport {colors} from './styles/color'\n\nlet {TabListStyle, ActionButtonStyle, TabStyle, PanelStyle} = styledTabTab;\n\nTabListStyle = styled(TabListStyle)`\n  background-color: transparent;\n  border: 0;\n  width: 360px;\n  margin-left: -25px;\n`;\n\nTabStyle = styled(TabStyle)`\n  transition: color .28s ease;\n  color: ${colors.slate};\n  display: block;\n  z-index: 5;\n  border-left: 1px solid  ${colors.lightestnavy};\n  ${props => props.active && !props.vertical ?\n    `\n      border-left: 2px solid ${colors.green};\n      color:  ${colors.green};\n    `\n    : null}\n  &:hover {\n    background-color:  ${colors.greentint};\n    color:  ${colors.green};\n    border-left: 2px solid  ${colors.green};\n  }\n`;\n\nActionButtonStyle = styled(ActionButtonStyle)`\n  background-color: transparent;\n  border: transparent;\n  z-index: -3;\n  // border-right: 1px solid  ${colors.lightestnavy};\n`;\n\nPanelStyle = styled(PanelStyle)`\n  width: 70%;\n  right: 0;\n  margin-top: -175px;\n  margin-left: 350px;\n  transition: box-shadow .25s, -webkit-box-shadow .25s;\n  background-color: transparent;\n  // border: 1px solid  ${colors.lightestnavy};\n`;\n\nexport default {\n    TabList: TabListStyle,\n    ActionButton: ActionButtonStyle,\n    Tab: TabStyle,\n    Panel: PanelStyle\n}\n","import styled from 'styled-components'\nimport {colors} from \"./color\";\n\nexport const FormWrapper = styled.div`\n\tdisplay: block;\n\tcolor: ${colors.slate};\n\tpadding-bottom: 75px;\n`\nexport const Info = styled.div`\n\tdisplay: block;\n`\nexport const InfoPara = styled.p`\n\tmargin-left: 25px;\n\tcolor: ${colors.slate};\n\t\n\t::before {\n\t  content: \"▹\";\n\t  position: absolute;\n\t  margin-left: -25px;\n\t  color: ${colors.green};\n\t}\n`\n\nexport const FormTitle = styled.h2`\n\tcolor: ${colors.white};\n`\n\nexport const CalculationForm = styled.div`\n\tdisplay: block;\n\tmargin-top: 50px;\n`\nexport const CalculatorFormInput = styled.div`\n\tdisplay: block;\n\twidth: 100%;\n\tmargin-bottom: 45px;\n`\nexport const InputWrapper = styled.div`\n\tdisplay: flex;\n\twidth: 100%;\n`\nexport const FormInput = styled.div`\n\tdisplay: block;\n\t\n\tlabel {\n\t  font-size: .95em;\n\t  margin-bottom: 5px;\n\t  display: block;\n\t  color: ${colors.lightestslate}\n\t}\n\t\n\tsmall {\n\t  font-size: .75em;\n\t  color: lighten( $grey, 10% );\n\t}\n`\nexport const InputBox = styled.input`\n\t  box-sizing: border-box;\n\t  width: 90%;\n\t  padding: 5px 10px;\n\t  font-size: 100%;\n\t  color: ${colors.slate};\n\t  border: 2px solid ${colors.greentint};\n  \t  border-radius: 4px;\n  \t  background: transparent;\n`\n\nexport const ResultSide = styled.div`\n\tdisplay: block;\n`\n\nexport const ResultLabel = styled.h3`\n\tcolor: ${colors.green}\n\tfont-size: 18px;\n`\n","import React, {useState} from 'react';\nimport {\n    FormWrapper,\n    Info, FormTitle, InfoPara,\n    CalculationForm,\n    CalculatorFormInput,\n    InputWrapper, FormInput, InputBox,\n    ResultSide,\n\n    ResultLabel\n} from \"../styles/contants\"\n\nfunction BasicForm() {\n    // state to storage the values given by the user when filling the input fields\n    const [userValues, setUserValues] = useState({\n        amount: '',\n        interest: '',\n        months: '',\n    })\n    // state to storage the results of the calculation\n    const [results, setResults] = useState({\n        monthlyPayment: '',\n        totalPayment: '',\n        totalInterest: '',\n    });\n\n    // state to storage error message\n    const [error, setError] = useState('');\n\n    // event handler to update state when the user enters values\n    function handleInputChange (event) {\n        const value = event.target.value;\n        setUserValues({\n            ...userValues,\n            [event.target.name]: value\n        });\n        event.preventDefault();\n        if (isValid()) {\n            setError('');\n            calculateResults(userValues);\n        }\n    }\n\n    // Manage validations and error messages\n    const isValid = () => {\n        const {amount, interest, months} = userValues;\n        let actualError = '';\n\n        // if (!amount || !interest || !months) {\n        //     actualError = 'All the values are required';\n        // }\n\n        if (isNaN(amount) || isNaN(interest) || isNaN(months)) {\n            actualError = 'All the values must be a valid number';\n        }\n\n        if (Number(amount) < 0 || Number(interest) < 0 || Number(months) < 0) {\n            actualError = 'All the values must be a positive number';\n        }\n        if (actualError) {\n            setError(actualError);\n            return false;\n        }\n        return true;\n    };\n\n\n    // Calculation\n    const calculateResults = ({amount, interest, months}) => {\n\n        if(Number(interest) > 0){\n            const PrincipalAmount = Number(amount);\n            const monthlyAPR = Number(interest) / 1200;\n            const numberMonths = Number(months);\n            const x = Math.pow(1 + monthlyAPR, -(numberMonths));\n            const monthly = (PrincipalAmount * monthlyAPR) / (1 - x);\n\n            if (isFinite(monthly)) {\n                const monthlyPaymentCalculated = monthly.toFixed(2);\n                const totalPaymentCalculated = (monthly * numberMonths).toFixed(2);\n                const totalInterestCalculated = (totalPaymentCalculated - PrincipalAmount).toFixed(2);\n\n                // Set up results to the state to be displayed to the user\n                setResults({\n                    monthlyPayment: monthlyPaymentCalculated,\n                    totalPayment: totalPaymentCalculated,\n                    totalInterest: totalInterestCalculated,\n                    isResult: true,\n                });\n            }\n        } else if ((Number(interest) === 0.0) && ((Number(amount) % Number(months)) === 0)) {\n            const PrincipalAmount = Number(amount);\n            const numberMonths = Number(months);\n            const monthly = PrincipalAmount/ numberMonths;\n\n            if (isFinite(monthly)) {\n                const monthlyPaymentCalculated = monthly.toFixed(2);\n                const totalPaymentCalculated = (monthly * numberMonths).toFixed(2);\n                const totalInterestCalculated = (monthly * numberMonths - PrincipalAmount).toFixed(2);\n\n                // Set up results to the state to be displayed to the user\n                setResults({\n                    monthlyPayment: monthlyPaymentCalculated,\n                    totalPayment: totalPaymentCalculated,\n                    totalInterest: totalInterestCalculated,\n                    isResult: true,\n                });\n            }\n        }\n        // return;\n    };\n\n    return (\n    <FormWrapper>\n        <Info>\n            <FormTitle>Basic Loan Calculation</FormTitle>\n            <InfoPara>Grabs three values from the form, and returns general information about a loan.</InfoPara>\n        </Info>\n\n\n        {/*<CalculationForm onSubmit={handleSubmitValues}>*/}\n        <CalculationForm>\n            <CalculatorFormInput>\n                <InputWrapper>\n                    <FormInput>\n                        <label>Loan Amount</label>\n                           <InputBox\n                               type='text'\n                               name='amount'\n                               placeholder='7,500'\n                               value={userValues.amount}\n                               onChange={handleInputChange}\n                           />\n                    </FormInput>\n                    <FormInput>\n                        <label>Interest Rate</label>\n                        <InputBox\n                            type='number'\n                            name='interest'\n                            step=\"0.01\" min=\"0\"\n                            placeholder='7.0'\n                            value={userValues.interest}\n                            onChange={handleInputChange}\n                        />\n                    </FormInput>\n                    <FormInput>\n                        <label>Term<small> (# of month)</small></label>\n                        <InputBox\n                            type='number'\n                            name='months'\n                            placeholder='12'\n                            min=\"1\"\n                            value={userValues.months}\n                            onChange={handleInputChange}\n                        />\n                    </FormInput>\n                </InputWrapper>\n                <p className='error'>{error}</p>\n            </CalculatorFormInput>\n\n            <ResultSide>\n                <ResultLabel>Results:</ResultLabel>\n                <InputWrapper>\n                    <FormInput>\n                        <label>Months Payment</label>\n                        <InputBox\n                            type='text'\n                            value={results.monthlyPayment}\n                            disabled\n                        />\n                    </FormInput>\n                    <FormInput>\n                        <label>Total Interest</label>\n                        <InputBox\n                            type='text'\n                            value={results.totalInterest}\n                            disabled\n                        />\n                    </FormInput>\n                    <FormInput>\n                        <label>Total Amount + Interest</label>\n                        <InputBox\n                            type='text'\n                            value={results.totalPayment}\n                            disabled\n                        />\n                    </FormInput>\n                </InputWrapper>\n            </ResultSide>\n        </CalculationForm>\n\n    </FormWrapper>\n    );\n}\n\nexport default BasicForm;\n","import React, {useState} from 'react';\nimport {\n  FormWrapper,\n  CalculationForm,\n  CalculatorFormInput,\n  FormTitle,\n  Info, InfoPara,\n  ResultSide,\n  FormInput, InputWrapper, InputBox, ResultLabel\n} from \"../styles/contants\"\n\nexport default function InterestForm() {\n  // state to storage the values given by the user when filling the input fields\n  const [userValues, setUserValues] = useState({\n\tamount: '',\n\tinterest: '',\n\tmonths: '',\n\trate_compare: ''\n  })\n  // state to storage the results of the calculation\n  const [results, setResults] = useState({\n\ttotalCurrentInterest: '',\n\ttotalCompareInterest: '',\n\ttotalSaveInterest: '',\n  });\n\n  // state to storage error message\n  const [error, setError] = useState('');\n\n  // event handler to update state when the user enters values\n  function handleInputChange(event) {\n\tconst value = event.target.value;\n\tsetUserValues({\n\t  ...userValues,\n\t  [event.target.name]: value\n\t});\n\tevent.preventDefault();\n\tif (isValid()) {\n\t  setError('');\n\t  calculateResults(userValues);\n\t}\n  }\n\n  // Manage validations and error messages\n  const isValid = () => {\n\tconst {amount, interest, months, rate_compare} = userValues;\n\tlet actualError = '';\n\n\t// if (!amount || !interest || !months) {\n\t//     actualError = 'All the values are required';\n\t// }\n\n\tif (isNaN(amount) || isNaN(interest) || isNaN(months) || isNaN(rate_compare)) {\n\t  actualError = 'All the values must be a valid number';\n\t}\n\n\tif (Number(amount) < 0 || Number(interest) < 0 || Number(months) < 0 || Number(rate_compare) < 0) {\n\t  actualError = 'All the values must be a positive number';\n\t}\n\n\tif  (Number(interest) === 0) {\n\t  actualError = 'There is no interest payment in this Loan';\n\t}\n\tif (actualError) {\n\t  setError(actualError);\n\t  return false;\n\t}\n\treturn true;\n  };\n\n\n  // Calculation\n  const calculateResults = ({amount, interest, months, rate_compare}) => {\n\n\tif ((Number(interest) > 0.0) && (Number(rate_compare) > 0)) {\n\t  //Current rate\n\t  const PrincipalAmount = Number(amount);\n\t  const monthlyAPR = Number(interest) / 1200;\n\t  const numberMonths = Number(months);\n\t  const x = Math.pow(1 + monthlyAPR, -(numberMonths));\n\t  const monthly = (PrincipalAmount * monthlyAPR) / (1 - x);\n\t  const totalPaymentCalculated = (monthly * numberMonths).toFixed(2);\n\n\t  //Compare rate\n\t  const compareAPR = Number(rate_compare) / 1200;\n\t  const rc = Math.pow(1 + compareAPR, -(numberMonths));\n\t  const rc_monthly = (PrincipalAmount * compareAPR) / (1 - rc);\n\t  const rc_totalPayment = (rc_monthly * numberMonths).toFixed(2);\n\n\t  if ((isFinite(monthly)) && (isFinite(rc_monthly))) {\n\t\tconst totalInterestCalculated = (totalPaymentCalculated - PrincipalAmount).toFixed(2);\n\t\tconst totalCompareInterestCalculated = (rc_totalPayment - PrincipalAmount).toFixed(2);\n\t\tconst totalSaveInterestCalculated = (totalInterestCalculated - totalCompareInterestCalculated).toFixed(2);\n\n\t\t// Set up results to the state to be displayed to the user\n\t\tsetResults({\n\t\t  totalCurrentInterest: totalInterestCalculated,\n\t\t  totalCompareInterest: totalCompareInterestCalculated,\n\t\t  totalSaveInterest: totalSaveInterestCalculated,\n\t\t  isResult: true,\n\t\t});\n\t  }\n\t} else if ((Number(interest) > 0.0) && (Number(rate_compare) === 0)){\n\t  //Current rate\n\t  const Amount = Number(amount);\n\t  const monthlyAPR = Number(interest) / 1200;\n\t  const numberMonths = Number(months);\n\t  const x = Math.pow(1 + monthlyAPR, -(numberMonths));\n\t  const monthly = (Amount * monthlyAPR) / (1 - x);\n\t  const totalPaymentCalculated = (monthly * numberMonths).toFixed(2);\n\n\t  if ((isFinite(monthly))) {\n\t\tconst totalInterestCalculated = (totalPaymentCalculated - Amount).toFixed(2);\n\n\t\tsetResults({\n\t\t  totalCurrentInterest: totalInterestCalculated,\n\t\t  totalCompareInterest: totalInterestCalculated,\n\t\t  totalSaveInterest: '0.0',\n\t\t  isResult: true,\n\t\t});\n\t  }\n\t}\n\t// return;\n  };\n\n  return (\n\t  <FormWrapper>\n\t\t<Info>\n\t\t  <FormTitle>Interest Savings Calculation</FormTitle>\n\t\t  <InfoPara>Grabs four values from the form, and returns general information about a loan.</InfoPara>\n\t\t</Info>\n\n\t\t<CalculationForm>\n\t\t  <CalculatorFormInput>\n\t\t\t<InputWrapper>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Loan Amount</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='amount'\n\t\t\t\t\tplaceholder='7,500'\n\t\t\t\t\tvalue={userValues.amount}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\n\t\t\t  <FormInput>\n\t\t\t\t<label>Interest Rate</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='number'\n\t\t\t\t\tname='interest'\n\t\t\t\t\tstep=\"0.1\" min=\"0.0\"\n\t\t\t\t\tplaceholder='7.0'\n\t\t\t\t\tvalue={userValues.interest}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\n\t\t\t  <FormInput>\n\t\t\t\t<label>Term<small> (# of month)</small></label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='number'\n\t\t\t\t\tname='months'\n\t\t\t\t\tplaceholder='12'\n\t\t\t\t\tmin=\"1\"\n\t\t\t\t\tvalue={userValues.months}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\n\t\t\t  <FormInput>\n\t\t\t\t<label>Comparison Rate</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='rate_compare'\n\t\t\t\t\tplaceholder='1.0'\n\t\t\t\t\tmin='0'\n\t\t\t\t\tvalue={userValues.rate_compare}\n\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t/>\n\t\t\t\t<small> decimal input format</small>\n\t\t\t  </FormInput>\n\n\t\t\t</InputWrapper>\n\t\t\t<p className='error'>{error}</p>\n\t\t  </CalculatorFormInput>\n\n\t\t  <ResultSide>\n\t\t\t<ResultLabel>Results:</ResultLabel>\n\t\t\t<InputWrapper>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Current Interest Total</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={results.totalCurrentInterest}\n\t\t\t\t\tdisabled\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Rate Compare Total</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={results.totalCompareInterest}\n\t\t\t\t\tdisabled\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\t\t\t  <FormInput>\n\t\t\t\t<label>Interest Save Total</label>\n\t\t\t\t<InputBox\n\t\t\t\t\ttype='text'\n\t\t\t\t\tvalue={results.totalSaveInterest}\n\t\t\t\t\tdisabled\n\t\t\t\t/>\n\t\t\t  </FormInput>\n\t\t\t</InputWrapper>\n\t\t  </ResultSide>\n\t\t</CalculationForm>\n\t  </FormWrapper>\n  )\n}\n","import styled from 'styled-components'\nimport {colors} from \"../styles/color\";\n\nexport const ResultTable = styled.div`\n\n`\nexport const Result = styled.table`\n\tmin-width: 100%;\n\tbackground: ${colors.greentint};\n\tborder: solid 1px ${colors.green};\n\tpadding: 20px/2 20px;\n    margin-top: 5px;\n    overflow: auto;\n    color: ${colors.lightestslate};\n    \n\tth {\n\t  white-space: nowrap;\n\t  padding: 2px 10px;\n\t  border-right: solid 1px ${colors.lightnavy};\n\t  border-bottom: solid 1px ${colors.lightestslate};\n\t}\n\n\ttd {\n\t  padding: 2px;\n\t  text-align: center;\n\t  border-right: solid 1px ${colors.lightnavy};\n\t}\n`\n","import React, {useState} from 'react';\nimport {Result, ResultTable} from \"./style\";\nimport {\n  FormWrapper,\n  CalculationForm,\n  CalculatorFormInput,\n  FormTitle,\n  Info,\n  InfoPara,\n  ResultSide,\n  FormInput,\n  InputWrapper, InputBox\n} from \"../styles/contants\"\nimport BasicForm from \"../BasicForm/BasicCalculation\";\n\nfunction AmortizationForm() {\n  const [userValues, setUserValues] = useState({\n\tamount: '',\n\tinterest: '',\n\tmonths: '',\n  })\n\n  const [results, setResults] = useState({\n\tpaymentNumber: '',\n\tpaymentAmount: '',\n\ttotalInterest: '',\n\ttotalPayment: '',\n\tbalance: '',\n  });\n\n  const [error, setError] = useState('');\n\n  function handleInputChange(event) {\n\tconst value = event.target.value;\n\tsetUserValues({\n\t  ...userValues,\n\t  [event.target.name]: value\n\t});\n\tevent.preventDefault();\n\tif (isValid()) {\n\t  setError('');\n\t  calculateResults(userValues);\n\t}\n  }\n\n  const isValid = () => {\n\tconst {amount, interest, months} = userValues;\n\tlet actualError = '';\n\n\tif (isNaN(amount) || isNaN(interest) || isNaN(months)) {\n\t  actualError = 'All the values must be a valid number';\n\t}\n\n\tif (Number(amount) < 0 || Number(interest) < 0.0 || Number(months) < 0) {\n\t  actualError = 'All the values must be a positive number';\n\t}\n\tif (actualError) {\n\t  setError(actualError);\n\t  return false;\n\t}\n\treturn true;\n  };\n\n  // Calculation\n  const calculateResults = ({amount, interest, months}) => {\n\tif (Number(interest) > 0.0) {\n\t  const LoanAmount = Number(amount);\n\t  const monthlyAPR = Number(interest) / 1200;\n\t  const num_payments = Number(months);\n\n\t  const x = Math.pow(1 + monthlyAPR, -(num_payments));\n\t  const payment_amount = (LoanAmount * monthlyAPR) / (1 - x);\n\n\t  if (isFinite(payment_amount)) {\n\t\tconst payment_amount_formatted = payment_amount.toFixed(2);\n\n\t\tconst totalInterest = ((payment_amount * num_payments) - LoanAmount);\n\t\tconst totalInterest_Formatted = totalInterest.toFixed(2);\n\n\t\tconst totalPayment = (payment_amount * num_payments);\n\t\tconst totalPayment_Formatted = totalPayment.toFixed(2);\n\n\n\t\tconst interest_per_payment = (payment_amount - (LoanAmount / num_payments));\n\t\tconst interest_per_payment_Formatted = (payment_amount - (LoanAmount / num_payments)).toFixed(2);\n\t\tconst amount_from_balance = payment_amount - interest_per_payment;\n\t\t// let counter_interest = 0;\n\t\t// let counter_payment = 0;\n\t\tconst counter_balance = parseInt(LoanAmount, 10);\n\t\tconst count_balance = counter_balance - amount_from_balance;\n\n\t\tsetResults({\n\t\t  // paymentNumber: '',\n\t\t  // paymentAmount: '',\n\t\t  // totalInterest: '',\n\t\t  // totalPayment: '',\n\t\t  // balance: '',\n\t\t  paymentNumber: num_payments,\n\t\t  paymentAmount: payment_amount_formatted,\n\t\t  totalInterest: interest_per_payment_Formatted,\n\t\t  totalPayment: totalPayment_Formatted,\n\t\t  balance: count_balance.toFixed(2),\n\t\t  isResult: true,\n\t\t});\n\t  }\n\t}\n  }\n\n\treturn (\n\t\t<FormWrapper>\n\t\t  <Info>\n\t\t\t<FormTitle>Interest Savings Calculation</FormTitle>\n\t\t\t<InfoPara>Grabs three values from the form, and displays a complete amortization schedule for the provided\n\t\t\t  loan information.</InfoPara>\n\t\t  </Info>\n\n\t\t  <CalculationForm>\n\t\t\t<CalculatorFormInput>\n\t\t\t  <InputWrapper>\n\t\t\t\t<FormInput>\n\t\t\t\t  <label>Loan Amount</label>\n\t\t\t\t  <InputBox\n\t\t\t\t\t  type='text'\n\t\t\t\t\t  name='amount'\n\t\t\t\t\t  placeholder='7,500'\n\t\t\t\t\t  value={userValues.amount}\n\t\t\t\t\t  onChange={handleInputChange}\n\t\t\t\t  />\n\t\t\t\t</FormInput>\n\t\t\t\t<FormInput>\n\t\t\t\t  <label>Interest Rate</label>\n\t\t\t\t  <InputBox\n\t\t\t\t\t  type='number'\n\t\t\t\t\t  name='interest'\n\t\t\t\t\t  step=\"0.1\" min=\"0.0\"\n\t\t\t\t\t  placeholder='7.0'\n\t\t\t\t\t  value={userValues.interest}\n\t\t\t\t\t  onChange={handleInputChange}\n\t\t\t\t  />\n\t\t\t\t</FormInput>\n\t\t\t\t<FormInput>\n\t\t\t\t  <label>Term<small> (# of month)</small></label>\n\t\t\t\t  <InputBox\n\t\t\t\t\t  type='number'\n\t\t\t\t\t  name='months'\n\t\t\t\t\t  placeholder='12'\n\t\t\t\t\t  min=\"1\"\n\t\t\t\t\t  value={userValues.months}\n\t\t\t\t\t  onChange={handleInputChange}\n\t\t\t\t  />\n\t\t\t\t</FormInput>\n\t\t\t  </InputWrapper>\n\t\t\t  <p className='error'>{error}</p>\n\t\t\t</CalculatorFormInput>\n\n\t\t\t<ResultSide>\n\t\t\t  <p><label>Results:</label></p>\n\t\t\t  <ResultTable>\n\t\t\t\t<Result>\n\t\t\t\t  <thead>\n\t\t\t\t  <tr>\n\t\t\t\t\t<th>#</th>\n\t\t\t\t\t<th>Payment Amt.</th>\n\t\t\t\t\t<th>Total Interest</th>\n\t\t\t\t\t<th>Total Payments</th>\n\t\t\t\t\t<th>Balance</th>\n\t\t\t\t  </tr>\n\t\t\t\t  </thead>\n\t\t\t\t  <tbody>\n\t\t\t\t  <tr>\n\t\t\t\t\t<td>{results.paymentNumber}</td>\n\t\t\t\t\t<td>{results.paymentAmount}</td>\n\t\t\t\t\t<td>{results.totalInterest}</td>\n\t\t\t\t\t<td>{results.totalPayment}</td>\n\t\t\t\t\t<td>{results.balance}</td>\n\t\t\t\t  </tr>\n\t\t\t\t  </tbody>\n\t\t\t\t</Result>\n\t\t\t  </ResultTable>\n\t\t\t</ResultSide>\n\t\t\t<div className=\"clear\"/>\n\t\t  </CalculationForm>\n\t\t</FormWrapper>\n\t)\n  }\n\nexport default AmortizationForm;\n","import styled from \"styled-components\";\nimport {colors} from \"../styles/color\";\n\nexport const Section = styled.section`\n\twidth: 100%;\n\theight: auto;\n\tpadding: 0 15% 15px 15%;\n\tcounter-increment: section 1;\n\tcolor: ${colors.slate};\n`\n\nexport const SectionTitle = styled.h1`\n\twidth: 100%;\n\tdisplay: flex;\n    -webkit-box-align: center;\n    align-items: center;\n    position: relative;\n    margin: 40px 15px 50px;\n    font-size: clamp(26px,5vw,32px);\n    white-space: nowrap;\n\tcolor: ${colors.lightestslate};\n\t\n\t::before{\n\t  position: relative;\n\t  bottom: 4px;\n\t  content: \"\" counter(section) \".\";\n\t  margin-right: 10px;\n\t  color: ${colors.green};\n\t  font-size: clamp(16px,3vw,20px);\n\t  font-weight: 400;\n    }\n\t::after{\n\t  content: \"\";\n\t  display: block;\n\t  position: relative;\n\t  top: 2px;\n\t  width: 850px;\n\t  height: 1px;\n\t  margin-left: 20px;\n\t  background-color: ${colors.lightestnavy};\n    }\n`\n","// import React from 'react';\n// import $ from 'jquery';\n//\n// import {Paper} from './appstyle';\n// // import BasicForm from \"./components/BasicCalculation\";\n//\n//\n// export default function App () {\n//   ;(function ($, window, document) {\n//\n//\n//     // CALCULATE AMORTIZATION SCHEDULE\n//     // This method outputs a table with the repayment schedule\n//\n//     // CALCULATE COMPARE\n//     // The comparison mode gets 4 values from the form and calculates, then\n//\n//     // CALCULATE BASIC\n//     // for the basic calculation, we're just getting the values and\n//\n//     // GET FIELD\n//     // A function just for grabbing the value from a particular field.\n//     // We need this because if the field doesn't exist, the plugin will\n//     // create it for them.\n//     const get_field = function (elem, options, name) {\n//\n//       // Check for an input with a className of the name.\n//       let field;\n//       if (elem.find(\".accrue-\" + name).length) { // if has a className of accrue-[name]\n//         field = elem.find(\".accrue-\" + name);\n//       } else if (elem.find(\".\" + name).length) { // if we have className of just the name\n//         field = elem.find(\".\" + name);\n//       } else if (elem.find(\"input[name~=\" + name + \"]\").length) {\n//         elem.find(\"input[name~=\" + name + \"]\");\n//       } else {\n//         field = \"\";\n//       }\n//\n//       // If we have the field value, return it right away so that the\n//       // calculator doesn't write the field to the form div since we\n//       // don't need it to.\n//       if (typeof (field) !== \"string\") {\n//         return field.val();\n//       }\n//\n//       if (name === \"term_compare\") {\n//         return false;\n//       }\n//\n//       // If we've gotten here, no fields were found that match the\n//       // criteria. Create the form field and return the default value.\n//       elem.find(\".form\").append(\n//           '<div className=\"accrue-field-' + name + '\">' +\n//           '<p><label>' + options.field_titles[name] + ':</label>' +\n//           '<input type=\"text\" className=\"' + name + '\" value=\"' + options.default_values[name] + '\" />' +\n//           (options.field_comments[name].length > 0 ? \"<small>\" + options.field_comments[name] + \"</small>\" : '') + '</p>' +\n//           '</div>');\n//       return elem.find(\".\" + name).val();\n//\n//     };\n// // calculating loan info for a single loan.\n//     const calculateBasic = function (elem, options, output_elem) {\n//\n//       // get the loan information from the current values in the form.\n//       const loan_info = $.loanInfo({\n//         amount: get_field(elem, options, \"amount\"),\n//         rate: get_field(elem, options, \"rate\"),\n//         term: get_field(elem, options, \"term\")\n//       });\n//\n//       // if valid, output into the output_elem that was passed into this function.\n//       if (loan_info !== 0) {\n//\n//         // replace the placeholders with the response values.\n//         const output_content = options.response_basic\n//             .replace(\"%payment_amount%\", formatNumber(loan_info.payment_amount_formatted, options))\n//             .replace(\"%num_payments%\", loan_info.num_payments)\n//             .replace(\"%total_payments%\", formatNumber(loan_info.total_payments_formatted, options))\n//             .replace(\"%total_interest%\", formatNumber(loan_info.total_interest_formatted, options));\n//\n//         // output the content to the actual output element.\n//         output_elem.html(output_content);\n//\n//       } else {\n//\n//         // if the values for the loan calculation aren't valid, provide an error.\n//         output_elem.html(options.error_text);\n//       }\n//\n//       // run the callback function after the calculation is done, including\n//       // the calculation info so it's available in the callback.\n//       options.callback(elem, loan_info);\n//     };\n// // compares two different loans to determine savings in interest.\n//     const calculateComparison = function (elem, options, output_elem) {\n//\n//       // see if there's a comparison term\n//       let term_compare = get_field(elem, options, \"term_compare\");\n//\n//       // if the comparison term is empty, use the normal term field\n//       if (typeof (term_compare) == \"boolean\") {\n//         term_compare = get_field(elem, options, \"term\");\n//       }\n//\n//       // Get information about the two different loans in question\n//       // and create a callback data variable that we'll pass into\n//       // our callback function.\n//       const loan_1_info = $.loanInfo({\n//             amount: get_field(elem, options, \"amount\"),\n//             rate: get_field(elem, options, \"rate\"),\n//             term: get_field(elem, options, \"term\")\n//           }),\n//           loan_2_info = $.loanInfo({\n//             amount: get_field(elem, options, \"amount\"),\n//             rate: get_field(elem, options, \"rate_compare\"),\n//             term: term_compare\n//           }),\n//           callback_data = {\n//             loan_1: loan_1_info,\n//             loan_2: loan_2_info\n//           };\n//\n//       // If both loans are good, populate response element with info,\n//       // else error.\n//       if (loan_1_info !== 0 && loan_2_info !== 0) {\n//         if (loan_1_info.total_interest - loan_2_info.total_interest > 0) {\n//           callback_data.savings = loan_1_info.total_interest - loan_2_info.total_interest;\n//         } else {\n//           callback_data.savings = 0;\n//         }\n//\n//         // replace our savings placeholder in the response text with\n//         // the real difference in interest.\n//         const output_content = options.response_compare\n//             .replace(\"%savings%\", formatNumber(callback_data.savings.toFixed(2), options))\n//             .replace(\"%loan_1_payment_amount%\", formatNumber(loan_2_info.payment_amount_formatted, options))\n//             .replace(\"%loan_1_num_payments%\", loan_2_info.num_payments)\n//             .replace(\"%loan_1_total_payments%\", loan_2_info.total_payments_formatted)\n//             .replace(\"%loan_1_total_interest%\", formatNumber(loan_2_info.total_interest_formatted, options))\n//             .replace(\"%loan_2_payment_amount%\", formatNumber(loan_1_info.payment_amount_formatted, options))\n//             .replace(\"%loan_2_num_payments%\", loan_1_info.num_payments)\n//             .replace(\"%loan_2_total_payments%\", loan_1_info.total_payments_formatted)\n//             .replace(\"%loan_2_total_interest%\", formatNumber(loan_1_info.total_interest_formatted, options));\n//         output_elem.html(output_content);\n//\n//       } else {\n//\n//         // output an error\n//         output_elem.html(options.error_text);\n//\n//       }\n//\n//       // run the callback, passing our loan data into it.\n//       options.callback(elem, callback_data);\n//     };\n// // for a single loan object.\n//     const calculateAmortization = function (elem, options, output_elem) {\n//\n//       // Get the loan information so we can build out our amortization\n//       // schedule table.\n//       const loan_info = $.loanInfo({\n//         amount: get_field(elem, options, \"amount\"),\n//         rate: get_field(elem, options, \"rate\"),\n//         term: get_field(elem, options, \"term\")\n//       });\n//\n//       // If the loan info's good, start buildin'!\n//       if (loan_info !== 0) {\n//\n//         // Set some initial variables for the table header, interest\n//         // per payment, amount from balance, and counter variables\n//         // to values as we list rows.\n//         let output_content = '<table className=\"accrue-amortization\">' +\n//             '<thead><tr>' +\n//             '<th className=\"accrue-payment-number\">#</th>' +\n//             '<th className=\"accrue-payment-amount\">Payment Amt.</th>' +\n//             '<th className=\"accrue-total-interest\">Total Interest</th>' +\n//             '<th className=\"accrue-total-payments\">Total Payments</th>' +\n//             '<th className=\"accrue-balance\">Balance</th>' +\n//             '</tr></thead><tbody>',\n//             interest_per_payment = loan_info.payment_amount - (loan_info.original_amount / loan_info.num_payments),\n//             amount_from_balance = loan_info.payment_amount - interest_per_payment,\n//             counter_interest = 0,\n//             counter_payment = 0,\n//             counter_balance = parseInt(loan_info.original_amount, 10);\n//\n//         // Start appending the table rows to our output variable.\n//         for (let i = 0; i < loan_info.num_payments; i++) {\n//\n//           // Record the payment in our counter variables.\n//           counter_interest = counter_interest + interest_per_payment;\n//           counter_payment = counter_payment + loan_info.payment_amount;\n//           counter_balance = counter_balance - amount_from_balance;\n//\n//           // bold the last row of the table by using <th>s for\n//           // the values.\n//           let cell_tag = \"td\";\n//           if (i === (loan_info.num_payments - 1)) {\n//             cell_tag = \"th\";\n//           }\n//\n//           // Append a row to the table\n//           output_content = output_content +\n//               '<tr>' +\n//               '<' + cell_tag + ' className=\"accrue-payment-number\">' + (i + 1) + '</' + cell_tag + '>' +\n//               '<' + cell_tag + ' className=\"accrue-payment-amount\">' + formatNumber(loan_info.payment_amount_formatted, options) + '</' + cell_tag + '>' +\n//               '<' + cell_tag + ' className=\"accrue-total-interest\">' + formatNumber(counter_interest.toFixed(2), options) + '</' + cell_tag + '>' +\n//               '<' + cell_tag + ' className=\"accrue-total-payments\">' + formatNumber(counter_payment.toFixed(2), options) + '</' + cell_tag + '>' +\n//               '<' + cell_tag + ' className=\"accrue-balance\">' + formatNumber(counter_balance.toFixed(2), options) + '</' + cell_tag + '>' +\n//               '</tr>';\n//         }\n//\n//         // Finish off our table tag.\n//         output_content = output_content +\n//             '</tbody></table>';\n//\n//         // Push our output content into the output element.\n//         output_elem.html(output_content);\n//       } else {\n//\n//         // Values aren't good yet, show the error.\n//         output_elem.html(options.error_text);\n//       }\n//\n//       // Execute callback, passing in loan information.\n//       options.callback(elem, loan_info);\n//     };\n// // let's start our plugin logic\n//     $.extend($.fn, {\n//       accrue: function (options) {\n//\n//         // set our options from the defaults, overriding with the\n//         // parameter we pass into this function.\n//         options = $.extend({calculationMethod: calculateBasic}, $.fn.accrue.options, options);\n//\n//         // Iterate through all the matching elements and return\n//         // the jquery object to preserve chaining.\n//         return this.each(function () {\n//\n//           // Store a jQuery object for our element so we can use it\n//           // inside our other bindings.\n//           const elem = $(this);\n//\n//           // Create the form div if it doesn't exist.\n//           if (!elem.find(\".form\").length) {\n//             elem.append('<div className=\"form\"></div>');\n//           }\n//\n//           // Get the amount, rate(s), and term - and clean the values\n//           const amount = get_field(elem, options, \"amount\");\n//           const rate = get_field(elem, options, \"rate\");\n//           const term = get_field(elem, options, \"term\");\n//\n//           // If we're in comparison mode, grab an additiona field/value.\n//           if (options.mode === \"compare\") {\n//             const rate_compare = get_field(elem, options, \"rate_compare\");\n//           }\n//\n//           // If we are using the default results div and it doesn't exist, create it.\n//           let output_elem;\n//           if (options.response_output_div === \".results\") {\n//\n//             if (elem.find(\".results\").length === 0) {\n//               elem.append('<div className=\"results\"></div>');\n//             }\n//\n//             // Set the output div as a variable so we can refer to it more easily.\n//             output_elem = elem.find(\".results\");\n//\n//           } else {\n//\n//             // Set the output div as a variable so we can refer to it more easily.\n//             output_elem = $(options.response_output_div);\n//\n//           }\n//\n//\n//           // Set the calculation method based on which mode we're in.\n//           let calculation_method;\n//           switch (options.mode) {\n//\n//             case \"basic\":\n//               calculation_method = calculateBasic;\n//               break;\n//\n//             case \"compare\":\n//               calculation_method = calculateComparison;\n//               break;\n//\n//             case \"amortization\":\n//               calculation_method = calculateAmortization;\n//               break;\n//\n//           }\n//\n//\n//           // Get the information about the loan.\n//           calculation_method(elem, options, output_elem);\n//\n//           // Do some different things if the operation mode is \"button\"\n//           if (options.operation === \"button\") {\n//\n//             // If we are using button operation mode and the button doesn't exist, create one.\n//             if (elem.find(\"button\").length === 0 && elem.find(\"input[type=submit]\").length === 0 && elem.find(\"input[type=image]\").length === 0) {\n//               elem.find(\".form\").append('<button className=\"accrue-calculate\">' + options.button_label + '</button>');\n//             }\n//\n//             // If the developer has chosen to bind to a button instead\n//             // of operate on keyup, let's set up a click event binding\n//             // that performs the calculation.\n//             elem.find(\"button, input[type=submit], input[type=image]\").each(function () {\n//               $(this).click(function (event) {\n//                 event.preventDefault();\n//                 calculation_method(elem, options, output_elem);\n//               });\n//             });\n//\n//           } else {\n//\n//             // Bind to the select and input elements so that we calculate\n//             // on keyup (or change in the case of the select list).\n//             elem.find(\"input, select\").each(function () {\n//               $(this).bind(\"keyup change\", function () {\n//                 calculation_method(elem, options, output_elem);\n//               });\n//             });\n//\n//           }\n//\n//           // If the developer has chosen to bind to a button instead\n//           // of operate on keyup, let's set up a click event binding\n//           // that performs the calculation.\n//           elem.find(\"form\").each(function () {\n//             $(this).submit(function (event) {\n//               event.preventDefault();\n//               calculation_method(elem, options, output_elem);\n//             });\n//           });\n//\n//         });\n//       }\n//     });\n//\n//\n//     // DEFAULTS\n//     // Set up some default options for our plugin that can be overridden\n//     // as needed when we actually instantiate our plugin on a form.\n//     $.fn.accrue.options = {\n//       mode: \"basic\",\n//       operation: \"keyup\",\n//       currency: \"USD\",\n//       language: \"en\",\n//       default_values: {\n//         amount: \"7,500\",\n//         rate: \"7%\",\n//         rate_compare: \"1.49%\",\n//         term: \"36m\"\n//       },\n//       field_titles: {\n//         amount: \"Loan Amount\",\n//         rate: \"Rate (APR)\",\n//         rate_compare: \"Comparison Rate\",\n//         term: \"Term\"\n//       },\n//       button_label: \"Calculate\",\n//       field_comments: {\n//         amount: \"\",\n//         rate: \"\",\n//         rate_compare: \"\",\n//         term: \"Format: 12m, 36m, 3y, 7y\"\n//       },\n//       response_output_div: \".results\",\n//       response_basic:\n//           '<p><strong>Monthly Payment:</strong><br />%payment_amount%</p>' +\n//           '<p><strong>Number of Payments:</strong><br />%num_payments%</p>' +\n//           '<p><strong>Total Payments:</strong><br />%total_payments%</p>' +\n//           '<p><strong>Total Interest:</strong><br />%total_interest%</p>',\n//       response_compare: '<p className=\"total-savings\">Save %savings% in interest!</p>',\n//       error_text: '<p className=\"error\">Please fill in all fields.</p>',\n//       callback: function (elem, data) {\n//       }\n//     };\n//\n//     // FORMAT MONEY\n//     // This function is used to add thousand seperators to numerical ouput\n//     // as a means of properly formatting money\n//     function formatNumber(num, options) {\n//       return new Intl.NumberFormat(options.language, {\n//         style: 'currency',\n//         currency: options.currency\n//       }).format(num);\n//     }\n//\n//\n//     // BASIC LOGGING FUNCTION\n//     // Checks to see if the console is available before outputting\n//     // anything through console.log(). Prevent issues with IE.\n//     const log = function (message) {\n//       if (window.console) {\n//         console.log(message);\n//       }\n//     };\n//\n//\n//     // GENERAL LOAN INFORMATION FUNCTION\n//     // This is the public function we use inside our plugin function\n//     // and we're exposing it here so that we can also provide generic\n//     // calculations that just return JSON objects that can be used\n//     // for custom-developed plugins.\n//     $.loanInfo = function (input) {\n//\n//       var amount = (typeof (input.amount) !== \"undefined\" ? input.amount : 0).toString().replace(/[^\\d.]/ig, ''),\n//           rate = (typeof (input.rate) !== \"undefined\" ? input.rate : 0).toString().replace(/[^\\d.]/ig, ''),\n//           term = (typeof (input.term) !== \"undefined\" ? input.term : 0);\n//\n//       // parse year values passed into the term value\n//       if (term.match(\"y\")) {\n//         term = parseInt(term.replace(/[^\\d.]/ig, ''), 10) * 12;\n//       } else {\n//         term = parseInt(term.replace(/[^\\d.]/ig, ''), 10);\n//       }\n//\n//       // process the input values\n//       const monthly_interest = rate / 100 / 12;\n//\n//       // Now compute the monthly payment amount.\n//       const x = Math.pow(1 + monthly_interest, term),\n//           monthly = (amount * x * monthly_interest) / (x - 1);\n//\n//       // If the result is a finite number, the user's input was good and\n//       // we have meaningful results to display\n//       if (amount * rate * term > 0) {\n//         // Fill in the output fields, rounding to 2 decimal places\n//         return {\n//           original_amount: amount,\n//           payment_amount: monthly,\n//           payment_amount_formatted: monthly.toFixed(2),\n//           num_payments: term,\n//           total_payments: (monthly * term),\n//           total_payments_formatted: (monthly * term).toFixed(2),\n//           total_interest: ((monthly * term) - amount),\n//           total_interest_formatted: ((monthly * term) - amount).toFixed(2)\n//         };\n//       } else {\n//         // The numbers provided won't provide good data as results,\n//         // so we'll return 0 so it's easy to test if one of the fields\n//         // is empty or invalid.\n//         return 0;\n//       }\n//     };\n//\n//\n//     // REVERSE LOAN INFORMATION FUNCTION\n//     // This is a copy of the above, only that given a payment amount, rate and term it\n//     // will return the principal amount that can be borrowed.\n//     $.loanAmount = function (input) {\n//\n//       var payment = (typeof (input.payment) !== \"undefined\" ? input.payment : 0).toString().replace(/[^\\d.]/ig, ''),\n//           rate = (typeof (input.rate) !== \"undefined\" ? input.rate : 0).toString().replace(/[^\\d.]/ig, ''),\n//           term = (typeof (input.term) !== \"undefined\" ? input.term : 0);\n//\n//       // parse year values passed into the term value\n//       if (term.match(\"y\")) {\n//         term = parseInt(term.replace(/[^\\d.]/ig, ''), 10) * 12;\n//       } else {\n//         term = parseInt(term.replace(/[^\\d.]/ig, ''), 10);\n//       }\n//\n//       // process the input values\n//       const monthly_interest = rate / 100 / 12,\n//           annual_interest = rate / 100;\n//\n//       // Now compute.\n//       const x = payment * (1 - Math.pow(1 + monthly_interest, -1 * term)) * (12 / (annual_interest));\n//\n//       // If the result is a finite number, the user's input was good and\n//       // we have meaningful results to display\n//       if (x > 0) {\n//         // Fill in the output fields, rounding to 2 decimal places\n//         return {\n//           principal_amount: x,\n//           principal_amount_formatted: (x * 1).toFixed(2),\n//           payment_amount: payment,\n//           payment_amount_formatted: (payment * 1).toFixed(2),\n//           num_payments: term,\n//           total_payments: (payment * term),\n//           total_payments_formatted: (payment * term).toFixed(2),\n//           total_interest: ((payment * term) - x),\n//           total_interest_formatted: ((payment * term) - x).toFixed(2)\n//         };\n//\n//       } else {\n//         // The numbers provided won't provide good data as results,\n//         // so we'll return 0 so it's easy to test if one of the fields\n//         // is empty or invalid.\n//         return 0;\n//       }\n//     };\n//\n//   })\n//   ($, window, document);\n//   )\n// }\nimport \"../../style.scss\";\nimport React from 'react';\nimport {Tabs, TabList, Tab, PanelList, Panel} from \"react-tabtab\";\nimport customStyle from '../TabStyles';\nimport BasicForm from \"../BasicForm/BasicCalculation\";\nimport InterestForm from \"../InterestForm/InterestForm\";\nimport AmortizationForm from \"../AmortizationForm/AmortizationForm\";\nimport {Section, SectionTitle} from \"./style\";\nimport { Info, InfoPara} from \"../styles/contants\";\n\nexport default function App(){\n  return (\n      <div className=\"App\">\n        <Section>\n          <SectionTitle>Background</SectionTitle>\n          <Info>\n            <p>This is a ReactJS App for providing loan and interest calculations on web pages. It's small, fast, flexible, and forgiving.</p>\n            <InfoPara>Small: The minified version of the plugin is under 5kb.</InfoPara>\n            <InfoPara>Fast: It loads and executes quickly, and instantly provides results as your user types.</InfoPara>\n            <InfoPara>Flexible: Don't want it to calculate on keyup? There's a setting for that. Want to execute your own code every time the the tool calculates? Just provide a callback function. With every setting in the plugin accessible, you can completely customize the experience.</InfoPara>\n            <InfoPara>Forgiving: If you don't provide it with fields that are required to perform calculations, it will add them to the bottom of the form. If you don't provide it with a form or results div to begin with, you guessed it - it creates them. It will operate when trained on a completely empty div or use any fields you provide yourself.</InfoPara>\n          </Info>\n        </Section>\n        <Section>\n            <SectionTitle>Calculation Demos</SectionTitle>\n              <Tabs customStyle={customStyle} >\n                  <TabList>\n                    <Tab>Basic Loan Calculation</Tab>\n                    <Tab>Interest Savings Calculation</Tab>\n                    <Tab>Amortization Schedule Calculation</Tab>\n                  </TabList>\n\n                  <PanelList>\n                    <Panel>\n                      <BasicForm />\n                    </Panel>\n                    <Panel>\n                     <InterestForm/>\n                    </Panel>\n                    <Panel>\n                      <AmortizationForm />\n                    </Panel>\n                  </PanelList>\n              </Tabs>\n          </Section>\n      </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}